#include <iostream>
#include <fstream>
#include <sstream>
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <sys/types.h>
#include <dirent.h>

#include <mutex>
#include <string>
#include <vector>
#include <map>
#include <unordered_map>
#include <assert.h>
#include <algorithm>

#include "rpc.h"
#include "mr_protocol.h"

using namespace std;

struct KeyVal {
    string key;
    string val;
};

//
// The map function is called once for each file of input. The first
// argument is the name of the input file, and the second is the
// file's complete contents. You should ignore the input file name,
// and look only at the contents argument. The return value is a slice
// of key/value pairs.
//
vector <KeyVal> Map(const string &filename, const string &content) {
	// Copy your code from mr_sequential.cc here.
    int end_word = 0;
    string str = content;
    int length = str.length();
    vector<KeyVal> results;
    while(1) {
        if(length <= 0 ||end_word > length) {
            break;
        }
        char letter = str[end_word];
        if((letter >= 'A' && letter <= 'Z') || (letter >= 'a' && letter <= 'z')) {
            end_word++;
        } else {
            if(end_word == 0) {
                str.erase(0, 1);
                length--;
            } else {
                KeyVal kv;
                string word = str.substr(0, end_word);
                kv.key = word;
                kv.val = "1";
                results.push_back(kv);
                str.erase(0, end_word + 1);
                end_word = 0;
                length = str.length();
            }
        }
    }
    return results;
}

//
// The reduce function is called once for each key generated by the
// map tasks, with a list of all the values created for that key by
// any map task.
//
string Reduce(const string &key, const vector <string> &values) {
    // Copy your code from mr_sequential.cc here.
    int total_num = 0;
    for (string value : values) {
        int num = atoi(value.c_str());
        total_num = total_num + num;
    }
    return to_string(total_num);
}

typedef vector<KeyVal> (*MAPF)(const string &key, const string &value);
typedef string (*REDUCEF)(const string &key, const vector<string> &values);

class Worker {
public:
    Worker(const string &dst, const string &dir, MAPF mf, REDUCEF rf);

    void doWork();

private:
    void doMap(int index, const string &filename);
    void doReduce(int index, int nfiles);
    void doSubmit(mr_type_task type_task, int index);

    void askTask(mr_protocol::AskTaskResponse &res);
	void forContent(vector<string> contents, string prefix_intermediate);
	void reduceContent(vector<KeyVal> &KVA, string &content);
	void sortKVA(vector<KeyVal> &KVA);
	string KVAOutput(vector<KeyVal> &KVA); 

    mutex mtx;
    int id;

    bool working = false;  // current process is working or not

    rpcc *cl;
    std::string basedir;
    MAPF mapf;
    REDUCEF reducef;
};


Worker::Worker(const string &dst, const string &dir, MAPF mf, REDUCEF rf)
{
	this->basedir = dir;
	this->mapf = mf;
	this->reducef = rf;

	sockaddr_in dstsock;
	make_sockaddr(dst.c_str(), &dstsock);
	this->cl = new rpcc(dstsock);
	if (this->cl->bind() < 0) {
		printf("mr worker: call bind error\n");
	}
}

void Worker::askTask(mr_protocol::AskTaskResponse &res) {
    mr_protocol::status ret = cl->call(mr_protocol::asktask, id, res);
    VERIFY (ret == mr_protocol::OK);
}

void Worker::doMap(int index, const string &filename)
{
	// Lab4: Your code goes here.
	string content;
	string prefix_intermediate;
	vector <string> contents(REDUCER_COUNT);
	prefix_intermediate = basedir + "mr-" + to_string(index) + "-";
	working = true;
    getline(ifstream(filename), content, '\0');
    vector <KeyVal> keyVals = Map(filename, content);

    for (const KeyVal &keyVal : keyVals) {
        int reducerId = strHash(keyVal.key);
        contents[reducerId] += keyVal.key + ':' + keyVal.val + ':';
    }
	forContent(contents, prefix_intermediate);
}


void Worker::forContent(vector<string> contents, string prefix_intermediate) {
	for (int i = 0; i < REDUCER_COUNT; i++) {
        const string &content = contents[i];
        if (!content.empty()) {
            string filepath_intermediate = prefix_intermediate + to_string(i);
            ofstream file(filepath_intermediate, ios::out);
            file << content;
            file.close();
        }
    }
}

void Worker::reduceContent(vector<KeyVal> &KVA, string &content) {
	while (content.length() > 0) {
		KeyVal kv;
        size_t pos = content.find(":");
        kv.key = content.substr(0, pos);
        content.erase(0, pos + 1);
        pos = content.find(":");
        kv.val = content.substr(0, pos);
        content.erase(0, pos + 1);
        KVA.push_back(kv);
    }
}

void Worker::doReduce(int index, int nfiles) {
	// Lab4: Your code goes here.
    working = true;
	vector<string> filenames;
	int fileCount = scanDir(this->basedir, filenames);
	if (fileCount <= 0) {
		printf("Reduce worker: no intermediate files\n");
		return;
    }
    vector<KeyVal> KVA;
    for (const string filename: filenames) {
        int mapId, reduceId;
        sscanf(filename.c_str(), "mr-%d-%d", &mapId, &reduceId);
        char mapIdFirst = filename[3];
        if (reduceId == index && mapIdFirst >= '0' && mapIdFirst <= '9') {
            string full_path = basedir + filename;
            string content;
            ifstream in(full_path);
            getline(in, content, '\0');
            in.close();
			reduceContent(KVA, content);
        }
    }
	sortKVA(KVA);
	string mr_out = basedir;
	mr_out.append("mr-out-").append(to_string(index));
	ofstream out(mr_out);
	string output = KVAOutput(KVA);
	out << output;
    out.close();
}


string Worker::KVAOutput(vector<KeyVal> &KVA) {
	string output;
	for (size_t i = 0; i < KVA.size();) {
        size_t j = i + 1;
        for (; j < KVA.size() && KVA[j].key == KVA[i].key;) {
        	j++;
		}
        vector < string > values;
        for (size_t k = i; k < j; k++) {
        	values.push_back(KVA[k].val);
        }
        output.append(KVA[i].key);
		output.append(" ");
		output.append(Reduce(KVA[i].key, values));
		output.append("\n");
        i = j;
    }
	return output;
} 

void Worker::sortKVA(vector<KeyVal> &KVA) {
	sort(KVA.begin(), KVA.end(), [](KeyVal const & a, KeyVal const & b) {
        return a.key < b.key;
	});
}

void Worker::doSubmit(mr_type_task type_task, int index)
{
	bool b;
	mr_protocol::status ret = this->cl->call(mr_protocol::submittask, type_task, index, b);
	if (ret != mr_protocol::OK) {
		fprintf(stderr, "submit task failed\n");
		exit(-1);
	}
}

void Worker::doWork()
{
	while(1) {
		//
		// Lab4: Your code goes here.
		// Hints: send asktask RPC call to coordinator
		// if mr_type_task::MAP, then doMap and doSubmit
		// if mr_type_task::REDUCE, then doReduce and doSubmit
		// if mr_type_task::NONE, meaning currently no work is needed, then sleep
		//
        mr_protocol::AskTaskResponse res;
        askTask(res);
		if(res.type_task == MAP) {
			doMap(res.index, res.filename);
            doSubmit(MAP, res.index);
		}
		if(res.type_task == REDUCE) {
			doReduce(res.index, res.nfiles);
            doSubmit(REDUCE, res.index);
		}
		if(res.type_task == NONE) {
			sleep(1);
		}
	}
}

int main(int argc, char **argv)
{
    if (argc != 3) {
        fprintf(stderr, "Usage: %s <coordinator_listen_port> <intermediate_file_dir> \n", argv[0]);
        exit(1);
    }

    MAPF mf = Map;
    REDUCEF rf = Reduce;

    Worker w(argv[1], argv[2], mf, rf);
    w.doWork();

    return 0;
}
